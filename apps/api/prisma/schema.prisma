// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  username     String
  email        String        @unique
  password     String
  role         Role          @default(CUSTOMER)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  events       Event[]
  transactions Transaction[]
  coupons      Coupon[]

  referralCode  ReferralCode?
  referrerUsage ReferralUsage?

  @@map("users")
}

model Event {
  id              String        @id @default(cuid())
  organizer       User          @relation(fields: [organizerUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizerUserId String
  category        Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId      String
  name            String
  price           Int?
  startEvent      DateTime
  endEvent        DateTime
  location        String
  description     String
  availableSeat   Int
  image           String?
  eventType       EventType
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  transactions    Transaction[]
  promotions      Promotion[]
  reviews         Review[]

  @@map("events")
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events    Event[]

  @@map("categories")
}

model Transaction {
  id              String   @id @default(cuid())
  event           Event    @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventId         String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId          String
  date            DateTime
  amountPaid      Int?
  discountApplied Int?
  pointUsed       Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  coupon          Coupon?

  @@map("transactions")
}

model Promotion {
  id                 String   @id @default(cuid())
  event              Event    @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventId            String
  discountPercentage Int
  startDate          DateTime
  endDate            DateTime
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("promotions")
}

model Review {
  id        String   @id @default(cuid())
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventId   String
  rating    Int
  feedback  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model ReferralCode {
  id            String          @id @default(cuid())
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId        String          @unique
  code          String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  referralUsage ReferralUsage[]

  @@map("referralCodes")
}

model ReferralUsage {
  id             String       @id @default(cuid())
  user           User         @relation(fields: [newUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  newUserId      String       @unique
  referralCode   ReferralCode @relation(fields: [referralCodeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  referralCodeId String
  usageDate      DateTime?
  expiryDate     DateTime
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("referralUsages")
}

model Coupon {
  id                 String       @id @default(cuid())
  user               User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId             String
  discountPercentage Int?
  maxDiscountPrice   Int?
  expiryDate         DateTime
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  transaction        Transaction? @relation(fields: [transactionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  transactionId      String?      @unique

  @@map("Coupons")
}

enum Role {
  ORGANIZER
  CUSTOMER
}

enum EventType {
  FREE
  PAID
}
